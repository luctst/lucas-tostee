{"version":3,"sources":["utils/fetchData.js","state/appState.js","state/reducers/test.js","state/store/appStore.js","styles/Container.js","components/Loader/Loader.style.js","components/Loader/Loader.js","serviceWorker.js","components/About/About.style.js","components/About/About.js","components/Contact/Contact.style.js","components/Contact/Contact.js","index.js","styles/helper.js"],"names":["fetchData","url","a","fetch","method","headers","process","data","json","dataParsed","dataUi","themeDark","test","state","appState","store","createStore","GlobalContainer","styled","div","Container","SCloaderAnim","keyframes","SCloader","span","Loader","Boolean","window","location","hostname","match","SCMainAbout","header","styleUtils","mainColor","mainOpacity","About","React","memo","useState","repoLength","setRepoLenght","useEffect","then","reponse","length","role","aria-label","SCcontact","details","styleHelper","Contact","href","Projects","lazy","render","as","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister","headerLinksColor"],"mappings":"0HAKMA,EAAS,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,+EAEGC,MAAMF,EAAK,CAC7BG,OAAQ,MACRC,QAAS,CACR,cAAgB,SAAhB,OAA0BC,4CAC1B,aAAc,YANA,cAEVC,EAFU,gBASSA,EAAKC,OATd,cASVC,EATU,yBAUTA,GAVS,uGAAH,sDAgBAT,O,qHCrBA,GACdU,OAAQ,CACPC,WAAW,ICIEC,EAJF,WAA+B,IAA9BC,EAA6B,uDAArBC,EAAqB,iCAC1C,OAAOD,GCCOE,EAFDC,YAAYJ,G,sfCA1B,IAAMK,EAAkBC,IAAOC,IAAV,KAKRC,EAAYF,YAAOD,EAAPC,CAAH,K,qgBCLtB,IAAMG,EAAeC,YAAH,KAuBHC,EAdEL,IAAOM,KAAV,IAUCH,GCdAI,EAJA,WACd,OAAO,kBAAC,EAAD,OCQYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,i1BCfN,IAkDeC,EAlDKb,IAAOc,OAAV,IAQNC,IAAWC,UAOXD,IAAWC,UACTD,IAAWE,YAIZF,IAAWC,WCARE,EAlBAC,IAAMC,MAAK,WAAO,IAAD,EACKD,IAAME,SAAS,GADpB,mBACxBC,EADwB,KACZC,EADY,KAQ/B,OALAJ,IAAMK,WAAU,WACf1C,YAAU,yDACT2C,MAAK,SAAAC,GAAO,OAAIH,EAAcG,EAAQC,aACrC,IAGF,kBAAC,EAAD,KACC,qCAAU,0BAAMC,KAAK,MAAMC,aAAW,eAA5B,iBACV,gJAAqH,0BAAMD,KAAK,MAAMC,aAAW,qBAA5B,iBAArH,iBACA,8DAAmD,IAAfP,EAAmB,kBAAC,EAAD,MAAYA,EAAnE,2DACA,mEAAwC,0BAAMM,KAAK,MAAMC,aAAW,iBAA5B,qB,2cCf3C,IA2BeC,EA3BG9B,IAAO+B,QAAV,IASJC,IAAYhB,UACVgB,IAAYf,aCDVgB,EATC,WACf,OACC,kBAAC,EAAD,KACC,4CACA,mDAAwB,uBAAGC,KAAK,iCAAR,UAAxB,QAA+E,uBAAGA,KAAK,oCAAR,WAA/E,8DCEGC,EAAWhB,IAAMiB,MAAK,kBAAM,gCAElCC,iBACC,kBAAC,IAAD,CAAUxC,MAAOA,GAChB,kBAACK,EAAD,CAAWoC,GAAG,QACb,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,6BAAK,kBAAC,EAAD,QAC9B,kBAAC,EAAD,MACA,kBAACL,EAAD,MACA,kBAAC,EAAD,SAIFM,SAASC,eAAe,SL4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB,+BMnIJ,KACd/B,UAAW,UACXgC,iBAAkB,UAClB/B,YAAa,M","file":"static/js/main.ea7034a8.chunk.js","sourcesContent":["/**\n * Fetch the data from an API by using the fetch API.\n * @param bdd the url to fetch the data.\n * @return Promise\n */\nconst fetchData = async url => {\n\ttry {\n\t\tconst data = await fetch(url, {\n\t\t\tmethod: \"get\",\n\t\t\theaders: {\n\t\t\t\t\"Authorization\": `token ${process.env.REACT_APP_APIKEY}`,\n\t\t\t\t\"User-Agent\": \"luctst\",\n\t\t\t}\n\t\t});\n\t\tconst dataParsed = await data.json();\n\t\treturn dataParsed;\n\t} catch (error) {\n\t\tthrow error;\n\t}\n}\n\nexport default fetchData;\n","export default {\n\tdataUi: {\n\t\tthemeDark: false\n\t}\n}\n","import appState from \"../appState\";\n\nconst test = (state = appState, action) => {\n\treturn state;\n}\n\nexport default test;\n","import {createStore} from \"redux\";\nimport test from \"../reducers/test\";\nconst store = createStore(test);\n\nexport default store;\n","import styled from \"styled-components\";\n\nconst GlobalContainer = styled.div`\n\tpadding: 0 15px;\n\tmargin: 0 auto;\n`;\n\nexport const Container = styled(GlobalContainer)`\n\tdetails {\n\t\t:hover {\n\t\t\tcursor: pointer;\n\t\t}\n\t}\n\t@media (min-width: 576px) {\n\t\tmax-width: 540px;\n\t}\n\n\t@media (min-width: 768px) {\n\t\tmax-width: 720px;\n\t}\n\n\t@media (min-width: 992px) {\n\t\tmax-width: 960px;\n\t}\n\n\t@media (min-width: 1200px) {\n\t\tmax-width: 1140px;\n\t}\n`;\n","import styled, {keyframes} from \"styled-components\";\n\nconst SCloaderAnim = keyframes`\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n`;\n\nconst SCloader = styled.span`\n\t&::after {\n\t\tcontent: \" \";\n\t\tdisplay: inline-block;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tmargin-left: 1em;\n\t\tborder-radius: 50%;\n\t\tborder: 2px solid #007bff;\n\t\tborder-color: #007bff transparent #007bff transparent;\n\t\tanimation: ${SCloaderAnim} 1.2s linear infinite;\n\t}\n`;\n\nexport default SCloader;\n","import React from \"react\";\nimport SCloader from \"./Loader.style\";\n\nconst Loader = () => {\n\treturn <SCloader></SCloader>\n};\n\nexport default Loader;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from \"styled-components\";\nimport styleUtils from \"../../styles/helper\";\n\nconst SCMainAbout = styled.header`\n\theight: fit-content;\n\tmargin: 2em 0;\n\th1 {\n\t\tfont-family: 'Jacques Francois', sans-serif;\n\t\tfont-size: 75px;\n\t\tmargin-top: 0;\n\t\tmargin-bottom: 0;\n\t\tcolor: ${styleUtils.mainColor};\n\t\tmargin-bottom: .3em;\n\t}\n\n\th2 {\n\t\tfont-family: \"Open Sans\", sans-serif;\n\t\tfont-size: 18px;\n\t\tcolor: ${styleUtils.mainColor};\n\t\topacity: ${styleUtils.mainOpacity};\n\t\tmargin: 0 0 .7em 0;\n\n\t\ta {\n\t\t\tcolor: ${styleUtils.mainColor};\n\t\t}\n\n\t\ta:first-child:hover {\n\t\t\tcolor: #00acee;\n\t\t}\n\n\t\ta:last-child:hover {\n\t\t\tcolor: #AD5C51;\n\t\t}\n\t}\n\n\t@media (max-width: 767px) {\n\t\th1 {\n\t\t\tfont-size: 52px;\n\t\t}\n\t\th2 {\n\t\t\tfont-size: 16.5px;\n\t\t\tline-height: 30px;\n\t\t\tpadding: 0;\n\t\t}\n\t}\n\n\t@media (min-width: 1000px) {\n\t\th2 {\n\t\t\twidth: 55vw;\n\t\t}\n\t}\n`;\n\nexport default SCMainAbout;\n","import React from \"react\";\nimport fetchData from \"./../../utils/fetchData\";\nimport SCMainAbout from \"./About.style\";\nimport Loader from \"./../Loader/Loader\";\n\nconst About = (React.memo(() => {\n\tconst [repoLength, setRepoLenght] = React.useState(0);\n\n\tReact.useEffect(() => {\n\t\tfetchData(\"https://api.github.com/user/repos?page=1&per_page=100\")\n\t\t.then(reponse => setRepoLenght(reponse.length));\n\t}, []);\n\n\treturn (\n\t\t<SCMainAbout>\n\t\t\t<h1>Hello <span role=\"img\" aria-label=\"Hello emoji\">👋</span></h1>\n\t\t\t<h2>Welcome to my website, my name is Lucas I live in Paris I'm working as a full-stack JavaScript developer, I also <span role=\"img\" aria-label=\"Heart green emoji\"> 💚</span> open source.</h2>\n\t\t\t<h2>I currently maintain more than {repoLength === 0 ? <Loader/> : repoLength} projects on Github, most of the time I use JavaScript.</h2>\n\t\t\t<h2>Click on the link below to see more <span role=\"img\" aria-label=\"Go down emoji\">👇</span></h2>\n\t\t</SCMainAbout>\n\t);\n}));\n\nexport default About;\n","import styled from \"styled-components\";\nimport styleHelper from \"./../../styles/helper\";\n\nconst SCcontact = styled.details`\n\tsummary {\n\t\tcolor: #192735;\n\t\tfont-family: 'Jacques Francois',sans-serif;\n\t\tfont-size: 17.5px;\n\t}\n\n\tp {\n\t\tfont-family: \"Open Sans\",sans-serif;\n\t\tcolor: ${styleHelper.mainColor};\n\t\topacity: ${styleHelper.mainOpacity};\n\t\tfont-size: 13.5px;\n\n\t\ta {\n\t\t\tcolor: #192735;\n\t\t}\n\n\t\ta:first-child:hover {\n\t\t\tcolor: #AD5C51;\n\t\t}\n\n\t\ta:last-child:hover {\n\t\t\tcolor: #00acee;\n\t\t}\n\t}\n`;\n\nexport default SCcontact;\n","import React from \"react\";\nimport SCcontact from \"./Contact.style\";\n\nconst Contact = () => {\n\treturn (\n\t\t<SCcontact>\n\t\t\t<summary>Contact</summary>\n\t\t\t<p>I'm mainly active on <a href=\"https://www.github.com/luctst\">Github</a> and <a href=\"https://www.twitter.com/@luctstt\">Twitter</a> don't hesitate to follow me to stay update 😊</p>\n\t\t</SCcontact>\n\t);\n};\n\nexport default Contact;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from \"./state/store/appStore\";\nimport { Container } from \"./styles/Container\";\nimport Loader from './components/Loader/Loader';\nimport * as serviceWorker from './serviceWorker';\nimport About from \"./components/About/About\";\nimport Contact from \"./components/Contact/Contact\";\nconst Projects = React.lazy(() => import(\"./container/Projects/Projects\"));\n\nrender(\n\t<Provider store={store}>\n\t\t<Container as=\"main\">\n\t\t\t<React.Suspense fallback={<div><Loader /></div>}>\n\t\t\t\t<About/>\n\t\t\t\t<Projects/>\n\t\t\t\t<Contact/>\n\t\t\t</React.Suspense>\n\t\t</Container>\n\t</Provider>\n\t,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n\tmainColor: \"#192735\",\n\theaderLinksColor: \"#d0021b\",\n\tmainOpacity: .8\n}\n"],"sourceRoot":""}